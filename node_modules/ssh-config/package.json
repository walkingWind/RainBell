{
  "_args": [
    [
      {
        "raw": "ssh-config@^1.0.1",
        "scope": null,
        "escapedName": "ssh-config",
        "name": "ssh-config",
        "rawSpec": "^1.0.1",
        "spec": ">=1.0.1 <2.0.0",
        "type": "range"
      },
      "D:\\webstorm\\ionic2workspace\\RainBell\\node_modules\\ionic"
    ]
  ],
  "_cnpm_publish_time": 1486369842052,
  "_from": "ssh-config@^1.0.1",
  "_hasShrinkwrap": false,
  "_id": "ssh-config@1.0.1",
  "_location": "/ssh-config",
  "_nodeVersion": "6.9.1",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/ssh-config-1.0.1.tgz_1486369840388_0.8063528868369758"
  },
  "_npmUser": {
    "name": "dotnil",
    "email": "jakeplus@gmail.com"
  },
  "_npmVersion": "3.10.8",
  "_phantomChildren": {},
  "_requested": {
    "raw": "ssh-config@^1.0.1",
    "scope": null,
    "escapedName": "ssh-config",
    "name": "ssh-config",
    "rawSpec": "^1.0.1",
    "spec": ">=1.0.1 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/ionic"
  ],
  "_resolved": "http://registry.npm.taobao.org/ssh-config/download/ssh-config-1.0.1.tgz",
  "_shasum": "38742116dced7d45f5362ca86af77130ccbebc8b",
  "_shrinkwrap": null,
  "_spec": "ssh-config@^1.0.1",
  "_where": "D:\\webstorm\\ionic2workspace\\RainBell\\node_modules\\ionic",
  "author": {
    "name": "dotnil",
    "email": "jakeplus@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/dotnil/ssh-config/issues"
  },
  "dependencies": {},
  "description": "SSH config parser and stringifier",
  "devDependencies": {
    "expect.js": "~0.3.1",
    "heredoc": "~1.3.1",
    "istanbul": "^0.3.17",
    "mocha": "~2.1.0"
  },
  "directories": {},
  "dist": {
    "shasum": "38742116dced7d45f5362ca86af77130ccbebc8b",
    "size": 4785,
    "noattachment": false,
    "tarball": "http://registry.npm.taobao.org/ssh-config/download/ssh-config-1.0.1.tgz"
  },
  "engine": {
    "node": ">= 4.0.0"
  },
  "gitHead": "d8b250b4987c70d7480f019475430300c1c0ad7e",
  "homepage": "https://github.com/dotnil/ssh-config#readme",
  "license": "MIT",
  "maintainers": [
    {
      "name": "dotnil",
      "email": "jakeplus@gmail.com"
    }
  ],
  "name": "ssh-config",
  "optionalDependencies": {},
  "publish_time": 1486369842052,
  "readme": "# SSH Config Parser & Stringifier\n\n[![NPM Downloads](https://img.shields.io/npm/dm/ssh-config.svg?style=flat)](https://www.npmjs.com/package/ssh-config)\n[![NPM Version](http://img.shields.io/npm/v/ssh-config.svg?style=flat)](https://www.npmjs.com/package/ssh-config)\n[![Build Status](https://travis-ci.org/dotnil/ssh-config.svg)](https://travis-ci.org/dotnil/ssh-config)\n\n\n## Usage\n\n```js\nvar sshConfig = require('ssh-config')\nvar heredoc = require('heredoc')\nvar expect = require('expect.js')\n\n// parse\nvar config = sshConfig.parse(heredoc(function() {/*\n  # Sample config\n  ControlMaster auto\n  ControlPath ~/.ssh/master-%r@%h:%p\n  IdentityFile ~/.ssh/id_rsa\n  ServerAliveInterval 80\n\n  Host tahoe1\n    HostName tahoe1.com\n\n  Host tahoe2\n    HostName tahoe2.com\n\n  Host *\n    User nil\n    ProxyCommand ssh -q gateway -W %h:%p\n    ForwardAgent true\n*/}))\n\n\n/*\n * config will be something like:\n *\n *   [ { \"param\": \"ControlMaster\",\n *       \"value\": \"auto\" },\n *     { \"param\": \"ControlPath\",\n *       \"value\": \"~/.ssh/master-%r@%h:%p\" },\n *     { \"param\": \"IdentityFile\",\n *       \"value\": \"~/.ssh/id_rsa\" },\n *     { \"param\": \"ServerAliveInterval\",\n *       \"value\": \"80\" },\n *     { \"param\": \"Host\",\n *       \"value\": \"tahoe1\",\n *       \"config\":\n *         [ { \"param\": \"HostName\",\n *             \"value\": \"tahoe1.com\" } ] },\n *     { \"param\": \"Host\",\n *       \"value\": \"tahoe2\",\n *       \"config\":\n *         [ { \"param\": \"HostName\",\n *             \"value\": \"tahoe2.com\" } ] },\n *     { \"param\": \"Host\",\n *       \"value\": \"*\",\n *       \"config\":\n *         [ { \"param\": \"User\",\n *             \"value\": \"nil\" },\n *           { \"param\": \"ProxyCommand\",\n *             \"value\": \"ssh -q gateway -W %h:%p\" },\n *           { \"param\": \"ForwardAgent\",\n *             \"value\": \"true\" } ] } ]\n */\n\n\n// Change the HostName in the Host tahoe2 section\nlet section = sshConfig.find({ Host: 'tahoe2' })\n\nsection.config.some(line => {\n  if (line.param === 'HostName') {\n    line.value = 'tahoe2.com.cn'\n    return true\n  }\n})\n\n\n// stringify with the original format and comments preserved.\nconsole.log(sshConfig.stringify(config))\n```\n\n\n### Iterating Sections\n\nTake the config above as an example, to iterator over sections, a simple for\nloop will suffice.\n\n```js\nfor (let i = 0; i < config.length; i++) {\n  let line = config[i]\n\n  // only section have sub config\n  if (line.config) {}\n\n  // or to make it explicit, check the parameter name and see if it's Host or Match\n  if (line.param === 'Host' || line.param === 'Match') {}\n}\n```\n\nYou can do it in ES2015 fashion too:\n\n```js\n// all the sections\nconfig.filter(line => !!line.config)\n```\n\nA section is an object that looks like below:\n\n```js\n{\n  \"param\": \"Host\",\n  \"value\": \"*\",\n  \"config\": [\n    {\n      \"param\": \"User\",\n      \"value\": \"nil\"\n    },\n    {\n      \"param\": \"ProxyCommand\",\n      \"value\": \"ssh -q gateway -W %h:%p\"\n    },\n    {\n      \"param\": \"ForwardAgent\",\n      \"value\": \"true\"\n    }\n  ]\n}\n```\n\n\n### `.compute` Parameters by Host\n\nBut iterating over sections and wild parameters to find the parameters you need\nis boring and less efficient. You can use `config.compute` method to compute\napllied parameters of certain host.\n\n```js\nexpect(config.compute('tahoe2')).to.eql({\n  ControlMaster: 'auto',\n  ControlPath: '~/.ssh/master-%r@%h:%p',\n  IdentityFile: [\n    '~/.ssh/id_rsa'\n  ],\n  ServerAliveInterval: '80',\n  Host: 'tahoe2',\n  HostName: 'tahoe2.com',\n  User: 'nil',\n  ProxyCommand: 'ssh -q gateway -W %h:%p',\n  ForwardAgent: 'true'\n})\n```\n\n**NOTICE** According to [ssh_config(5)][ssh_config], the first obtained\nparameter value will be used. So we cannot override existing parameters. It is\nsuggested that the general settings shall be at the end of your config file.\n\nThe `IdentityFile` parameter always contain an array to make possible multiple\n`IdentityFile` settings to be able to coexist.\n\n\n### `.find` sections by Host or Match\n\nTo ditch boilerplate codes like the for loop shown earlier, we can use the\n`.find(opts)` available in the parsed config object.\n\n```js\nconfig.find({ Host: 'example1' })\n```\n\nOr you can just brew it yourself:\n\n```js\nconfig.filter(line => line.param === 'Host' && line.value === 'example1').shift()\n```\n\n\n### `.remove` sections by Host or other criteria\n\nTo remove sections, we can pass the section to `.remove(opts)`.\n\n```js\nvar config = sshConfig.parse(/* ssh config text */)\n\n// find the section you want to remove, and remove it.\nvar section = config.find({ Host: 'example1' })\nconfig.remove(section)\n\n// or you can put it in one statement\nconfig.remove({ Host: 'example1' })\n```\n\n\n### `.append` sections\n\nStarting from version 1.0.0, there's no more `.append` method. Since the config\nis now a sub class if Array, you can append with methods like `.push` or `.concat`.\n\n```js\nlet newSection = sshConfig.parse(`\nHost *\n  User keanu\n`)\n\nconfig = config.concat(newSection)\nconfig.find({ Host: '*' })\n\n/*\n *\n{\n  param: 'Host',\n  value: '*',\n  config: [\n    {\n      param: 'User',\n      value: 'keanu'\n    }\n  ]\n}\n */\n\n```\n\n\n## References\n\n- [ssh_config(5)][ssh_config]\n- [ssh_config(5)][ssh_config_die]\n- [ssh_config(5) OpenBSD][ssh_config_openbsd]\n- http://en.wikibooks.org/wiki/OpenSSH/Client_Configuration_Files#.7E.2F.ssh.2Fconfig\n- http://stackoverflow.com/questions/10197559/ssh-configuration-override-the-default-username\n\n\n[ssh_config]: https://www.freebsd.org/cgi/man.cgi?query=ssh_config&sektion=5\n[ssh_config_die]: http://linux.die.net/man/5/ssh_config\n[ssh_config_openbsd]: http://www.openbsd.org/cgi-bin/man.cgi/OpenBSD-current/man5/ssh_config.5?query=ssh_config&arch=i386\n",
  "readmeFilename": "Readme.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/dotnil/ssh-config.git"
  },
  "scripts": {
    "cover": "istanbul cover _mocha -- test/test.*.js -R spec",
    "test": "mocha test/**/*.js"
  },
  "version": "1.0.1"
}
